{"version":3,"file":"github_pull_request.js","sourceRoot":"","sources":["../../../../../../src/modules/pull_request/infra/github_api/github_pull_request.ts"],"names":[],"mappings":";;;;;;AAEA,uCAAoD;AACpD,oDAAuB;AAGvB,MAAa,iBAAiB;IAC5B,YACS,MAAmB,EACnB,IAA8B;QAD9B,WAAM,GAAN,MAAM,CAAa;QACnB,SAAI,GAAJ,IAAI,CAA0B;IACpC,CAAC;IAEJ,KAAK,CAAC,WAAW,CAAC,OAAe;QAC/B,MAAM,EAAE,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;QACvC,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,uBAAuB,EAAE,CAAC;QAE7D,uCAAuC;QACvC,KAAK,MAAM,OAAO,IAAI,QAAQ,EAAE;YAC9B,IAAI,OAAO,CAAC,IAAI,EAAE,KAAK,IAAI,EAAE,CAAC,KAAK,EAAE;gBACnC,IAAI,OAAO,CAAC,IAAI,IAAI,OAAO,EAAE;oBAC3B,MAAM,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;iBACtD;gBACD,OAAO;aACR;SACF;QAED,MAAM,IAAI,CAAC,MAAM,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC;IACpD,CAAC;IAED,KAAK,CAAC,YAAY,CAAC,MAAqB;QACtC,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC;QACxD,wDAAwD;QACxD,MAAM,OAAO,GAAG,gBAAC,CAAC,YAAY,CAAC,UAAU,EAAE,MAAM,CAAC,MAAM,CAAC,oBAAW,CAAC,CAAC,CAAC;QACvE,MAAM,IAAI,GAAG,gBAAC,CAAC,GAAG,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;QAEvC,IAAI,gBAAC,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YACnB,OAAO,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;SAC/C;QAED,MAAM,QAAQ,GAAG,gBAAC,CAAC,YAAY,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QAC/C,MAAM,KAAK,GAAG,gBAAC,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;QAE3C,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;QAE9D,IAAI,IAAA,kBAAS,EAAC,QAAQ,CAAC,EAAE;YACvB,MAAM,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;SAC1C;QAED,IAAI,IAAA,kBAAS,EAAC,KAAK,CAAC,EAAE;YACpB,MAAM,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;SACpC;IACH,CAAC;CACF;AA9CD,8CA8CC","sourcesContent":["import { IGithubPullRequest } from \"#/pull_request/domain/types\";\nimport { GithubInfra } from \"src/infra\";\nimport { ChangeTypes, isDefined } from \"src/domain\";\nimport _ from \"lodash\";\nimport { PullRequestGithubApiLogs } from \"#/pull_request/infra/github_api/log\";\n\nexport class GithubPullRequest implements IGithubPullRequest {\n  constructor(\n    public github: GithubInfra,\n    public logs: PullRequestGithubApiLogs\n  ) {}\n\n  async postComment(message: string) {\n    const me = await this.github.getSelf();\n    const comments = await this.github.getContextIssueComments();\n\n    // If comment already exists, update it\n    for (const comment of comments) {\n      if (comment.user?.login == me.login) {\n        if (comment.body != message) {\n          await this.github.updateComment(comment.id, message);\n        }\n        return;\n      }\n    }\n\n    await this.github.createCommentOnContext(message);\n  }\n\n  async updateLabels(labels: ChangeTypes[]) {\n    const currentRaw = await this.github.getContextLabels();\n    // filters out unrelated tags so it doesn't change those\n    const current = _.intersection(currentRaw, Object.values(ChangeTypes));\n    const diff = _.xor(labels, currentRaw);\n\n    if (_.isEmpty(diff)) {\n      return this.logs.labelsMatch(current, labels);\n    }\n\n    const toRemove = _.intersection(current, diff);\n    const toAdd = _.intersection(labels, diff);\n\n    this.logs.labelsToBeChanged(current, labels, toAdd, toRemove);\n\n    if (isDefined(toRemove)) {\n      await this.github.removeLabels(toRemove);\n    }\n\n    if (isDefined(toAdd)) {\n      await this.github.addLabels(toAdd);\n    }\n  }\n}\n"]}