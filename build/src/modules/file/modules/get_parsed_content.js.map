{"version":3,"file":"get_parsed_content.js","sourceRoot":"","sources":["../../../../../src/modules/file/modules/get_parsed_content.ts"],"names":[],"mappings":";;;;;;AAAA,uCAAyE;AACzE,sDAAwD;AACxD,gEAAuC;AACvC,6CAA0C;AAEnC,MAAM,gBAAgB,GAAG,KAAK,EACnC,QAAgB,EAChB,GAAW,EACa,EAAE;IAC1B,MAAM,UAAU,GAAG,CAAC,IAAiB,EAAE,EAAE;QACvC,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC/B,IAAA,wBAAe,EAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;QACpC,OAAO,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC,QAAQ,EAAE,CAAC;IACxD,CAAC,CAAC;IAEF,6DAA6D;IAC7D,MAAM,IAAI,GAAG,MAAM,eAAM;SACtB,sBAAsB,CAAC,QAAQ,EAAE,GAAG,CAAC;SACrC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAkB,CAAC,CAAC;IAErC,0BAA0B;IAC1B,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE;QACf,MAAM,IAAI,4BAAe,CACvB,kBAAkB,QAAQ,eAAe,GAAG,cAAc,CAC3D,CAAC;KACH;IACD,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE;QACf,MAAM,IAAI,4BAAe,CACvB,kBAAkB,QAAQ,eAAe,GAAG,cAAc,CAC3D,CAAC;KACH;IACD,IAAI,CAAC,IAAI,EAAE,OAAO,EAAE;QAClB,OAAO,CAAC,IAAI,CAAC,kBAAkB,QAAQ,eAAe,GAAG,sBAAsB,CAAC,CAAC;QACjF,OAAO;YACL,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,OAAO,EAAE,IAAA,sBAAW,EAAC,EAAE,CAAC;SACzB,CAAC;KACH;IAED,4BAA4B;IAC5B,OAAO;QACL,IAAI,EAAE,IAAI,CAAC,IAAI;QACf,IAAI,EAAE,IAAI,CAAC,IAAI;QACf,OAAO,EAAE,IAAA,sBAAW,EAAC,UAAU,CAAC,IAAI,CAAC,CAAC;KACvC,CAAC;AACJ,CAAC,CAAC;AAzCW,QAAA,gBAAgB,oBAyC3B","sourcesContent":["import { ContentFile, ParsedContent, requireEncoding } from \"src/domain\";\nimport { UnexpectedError } from \"src/domain/exceptions\";\nimport frontmatter from \"front-matter\";\nimport { github } from \"src/infra/github\";\n\nexport const getParsedContent = async (\n  filename: string,\n  sha: string\n): Promise<ParsedContent> => {\n  const decodeData = (data: ContentFile) => {\n    const encoding = data.encoding;\n    requireEncoding(encoding, filename);\n    return Buffer.from(data.content, encoding).toString();\n  };\n\n  // Collect the file contents at the given sha reference frame\n  const data = await github\n    .getRepoFilenameContent(filename, sha)\n    .then((res) => res as ContentFile);\n\n  // Assert type assumptions\n  if (!data?.path) {\n    throw new UnexpectedError(\n      `requested file ${filename} at ref sha ${sha} has no path`\n    );\n  }\n  if (!data?.name) {\n    throw new UnexpectedError(\n      `requested file ${filename} at ref sha ${sha} has no name`\n    );\n  }\n  if (!data?.content) {\n    console.warn(`requested file ${filename} at ref sha ${sha} contains no content`);\n    return {\n      path: data.path,\n      name: data.name,\n      content: frontmatter('')\n    };\n  }\n\n  // Return parsed information\n  return {\n    path: data.path,\n    name: data.name,\n    content: frontmatter(decodeData(data))\n  };\n};\n"]}