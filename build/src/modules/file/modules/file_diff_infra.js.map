{"version":3,"file":"file_diff_infra.js","sourceRoot":"","sources":["../../../../../src/modules/file/modules/file_diff_infra.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  assertCategory,\n  AUTHOR_RE,\n  File,\n  FileDiff,\n  FormattedFile,\n  FrontMatterAttributes,\n  isDefined,\n  isNockNoMatchingRequest,\n  matchAll,\n  ParsedContent,\n  PR\n} from \"src/domain\";\nimport { IFileDiff } from \"#/file/domain/types\";\nimport { github } from \"src/infra\";\n\nexport class FileDiffInfra implements IFileDiff {\n  constructor(\n    public requireFilenameEipNum: (path: string) => Promise<number>,\n    public requirePr: () => Promise<PR>,\n    public getParsedContent: (\n      filename: string,\n      sha: string\n    ) => Promise<ParsedContent>\n  ) {}\n\n  /**\n   * Accepts a file and returns the information of that file at the beginning\n   * and current state of the PR; can be used to verify changes\n   *\n   * @param file given file name + diff to be done\n   * @returns the formatted file content at the head and base of the PR\n   */\n  getFileDiff = async (file: NonNullable<File>): Promise<FileDiff> => {\n    const pr = await this.requirePr();\n    const filename = file.filename;\n\n    // Get and parse head and base file\n    const head = await this.getParsedContent(filename, pr.head.sha);\n    // if the base file is new this will error, so use head instead\n    const base = await this.getParsedContent(filename, pr.base.sha).catch(\n      (err) => {\n        const shouldAddToRecords = isNockNoMatchingRequest(err);\n        if (shouldAddToRecords) {\n          throw err;\n        }\n        return head;\n      }\n    );\n\n    // Organize information cleanly\n    return {\n      head: await this.formatFile(head),\n      base: await this.formatFile(base)\n    };\n  };\n\n  formatFile = async (file: ParsedContent): Promise<FormattedFile> => {\n    const filenameEipNum = await this.requireFilenameEipNum(file.path);\n\n    return {\n      eipNum: file.content.attributes[FrontMatterAttributes.eip],\n      status:\n        file.content.attributes[FrontMatterAttributes.status]?.toLowerCase(),\n      authors: await this.getAuthors(\n        file.content.attributes[FrontMatterAttributes.author]\n      ),\n      name: file.name,\n      filenameEipNum,\n      category: assertCategory({\n        maybeCategory: file.content.attributes[FrontMatterAttributes.category],\n        fileName: file.name,\n        maybeType: file.content.attributes[FrontMatterAttributes.type]\n      }).category,\n      type: assertCategory({\n        maybeCategory: file.content.attributes[FrontMatterAttributes.category],\n        fileName: file.name,\n        maybeType: file.content.attributes[FrontMatterAttributes.type]\n      }).type\n    };\n  };\n\n  getAuthors = async (rawAuthorList?: string) => {\n    if (!rawAuthorList) return;\n\n    const resolveAuthor = async (author: string) => {\n      if (author[0] === \"@\") {\n        return author.toLowerCase();\n      } else {\n        // Email address\n        const queriedUser = await github.resolveUserByEmail(author);\n        if (!queriedUser) return;\n        return queriedUser.toLowerCase();\n      }\n    };\n\n    const authors = matchAll(rawAuthorList, AUTHOR_RE, 1);\n    const resolved = await Promise.all(authors.map(resolveAuthor)).then((res) =>\n      res.filter(isDefined)\n    );\n    return new Set(resolved);\n  };\n}\n"]}