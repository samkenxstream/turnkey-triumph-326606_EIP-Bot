{"version":3,"file":"editor_approval.js","sourceRoot":"","sources":["../../../../src/modules/purifiers/editor_approval.ts"],"names":[],"mappings":";;;AAAA,uCAAoD;AACpD,mCAAmC;AACnC,mCAA6B;AAC7B,mEAAsE;AAE/D,MAAM,sBAAsB,GAAG,CAAC,WAAwB,EAAE,EAAE;IACjE,MAAM,YAAY,GAAG,IAAA,kBAAS,EAAC,WAAW,CAAC,CAAC;IAC5C,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,GAAG,YAAY,CAAC;IAE1C,MAAM,gBAAgB,GAAG,CAAC,MAAM,CAAC,cAAc,CAAC,qBAAqB,CAAC;IACtE,MAAM,SAAS,GAAG,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,oBAAoB,CAAC;IAC3D,8DAA8D;IAC9D,+BAA+B;IAC/B,MAAM,oBAAoB,GACxB,CAAC,IAAA,mDAA2B,EAAC,WAAW,CAAC,CAAC,MAAM,CAAC,YAAY;SAC1D,mBAAmB,CAAC;IAEzB,MAAM,eAAe,GAAG,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,gBAAgB,CAAC;IAC/D,MAAM,gBAAgB,GAAG,CAAC,MAAM,CAAC,cAAc,CAAC,qBAAqB,CAAC;IACtE,MAAM,OAAO,GAAG,IAAA,UAAE,EAChB,QAAQ,CAAC,IAAI,CAAC,MAAM,KAAK,kBAAS,CAAC,KAAK,EACxC,QAAQ,CAAC,IAAI,CAAC,MAAM,KAAK,kBAAS,CAAC,KAAK,CACzC,CAAC;IAEF,IAAI,gBAAgB,IAAI,SAAS,EAAE;QACjC,MAAM,CAAC,UAAU,CAAC,oBAAoB,GAAG,SAAS,CAAC;KACpD;IAED,IAAI,gBAAgB,EAAE;QACpB,MAAM,CAAC,YAAY,CAAC,gBAAgB,GAAG,SAAS,CAAC;KAClD;IAED,MAAM,cAAc,GAAG,IAAA,UAAE,EACvB,CAAC,gBAAgB,IAAI,SAAS,EAC9B,CAAC,gBAAgB,IAAI,eAAe,EACpC,CAAC,gBAAgB,IAAI,CAAC,oBAAoB;IAC1C,mEAAmE;IACnE,CAAC,gBAAgB,IAAI,gBAAgB,IAAI,OAAO,CACjD,CAAC;IACF,IAAI,CAAC,cAAc,EAAE;QACnB,MAAM,CAAC,cAAc,CAAC,qBAAqB,GAAG,SAAS,CAAC;KACzD;IAED,OAAO,EAAE,GAAG,WAAW,EAAE,MAAM,EAAE,CAAC;AACpC,CAAC,CAAC;AAvCW,QAAA,sBAAsB,0BAuCjC","sourcesContent":["import { EipStatus, TestResults } from \"src/domain\";\nimport { cloneDeep } from \"lodash\";\nimport { OR } from \"#/utils\";\nimport { statusChangeAllowedPurifier } from \"./status_change_allowed\";\n\nexport const editorApprovalPurifier = (testResults: TestResults) => {\n  const _testResults = cloneDeep(testResults);\n  const { errors, fileDiff } = _testResults;\n\n  const isEditorApproved = !errors.approvalErrors.isEditorApprovedError;\n  const isNewFile = !!errors.fileErrors.filePreexistingError;\n  // I call the purifier because we shouldn't mention editors if\n  // the status change is allowed\n  const statusChangedAllowed =\n    !statusChangeAllowedPurifier(testResults).errors.headerErrors\n      .constantStatusError;\n\n  const isInvalidStatus = !!errors.headerErrors.validStatusError;\n  const isAuthorApproved = !errors.approvalErrors.isAuthorApprovedError;\n  const isFinal = OR(\n    fileDiff.head.status === EipStatus.final,\n    fileDiff.base.status === EipStatus.final\n  );\n\n  if (isEditorApproved && isNewFile) {\n    errors.fileErrors.filePreexistingError = undefined;\n  }\n\n  if (isEditorApproved) {\n    errors.headerErrors.validStatusError = undefined;\n  }\n\n  const mentionEditors = OR(\n    !isEditorApproved && isNewFile,\n    !isEditorApproved && isInvalidStatus,\n    !isEditorApproved && !statusChangedAllowed,\n    // Final EIPs should first get author approval then mention editors\n    !isEditorApproved && isAuthorApproved && isFinal\n  );\n  if (!mentionEditors) {\n    errors.approvalErrors.isEditorApprovedError = undefined;\n  }\n\n  return { ...testResults, errors };\n};\n"]}