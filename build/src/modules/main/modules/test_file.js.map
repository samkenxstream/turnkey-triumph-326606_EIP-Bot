{"version":3,"file":"test_file.js","sourceRoot":"","sources":["../../../../../src/modules/main/modules/test_file.ts"],"names":[],"mappings":";;;AAAA,uCAA+D;AAC/D,iCAAqC;AACrC,6CAYsB;AACtB,sDAAqD;AAE9C,MAAM,QAAQ,GAAG,KAAK,EAAE,IAAU,EAAwB,EAAE;IACjE,yFAAyF;IACzF,MAAM,MAAM,GAAG,uBAAc,CAAC;IAE9B,uEAAuE;IACvE,wEAAwE;IACxE,MAAM,QAAQ,GAAG,MAAM,IAAA,kBAAW,EAAC,IAAI,CAAC,CAAC;IACzC,IAAI;QACF,IAAI,GAAG,MAAM,IAAA,mCAAsB,EAAC,IAAI,CAAC,CAAC;KAC3C;IAAC,OAAO,GAAQ,EAAE;QACjB,IAAA,yBAAY,EAAC,GAAG,EAAE;YAChB,oBAAoB,EAAE,CAAC,OAAO,EAAE,EAAE;gBAChC,MAAM,CAAC,UAAU,CAAC,oBAAoB,GAAG,OAAO,CAAC;YACnD,CAAC;YACD,2CAA2C;SAC5C,CAAC,CAAC;QAEH,MAAM,CAAC,cAAc,CAAC,qBAAqB,GAAG,MAAM,IAAA,oCAAuB,EACzE,QAAQ,CACT,CAAC;QACF,qDAAqD;QACrD,IAAI,MAAM,CAAC,cAAc,CAAC,qBAAqB,EAAE;YAC/C,OAAO;gBACL,MAAM;gBACN,QAAQ;aACT,CAAC;SACH;KACF;IAED,MAAM,CAAC,cAAc,CAAC,qBAAqB,GAAG,MAAM,IAAA,oCAAuB,EACzE,QAAQ,CACT,CAAC;IACF,MAAM,CAAC,cAAc,CAAC,iCAAiC;QACrD,MAAM,IAAA,sCAAyB,EAAC,QAAQ,CAAC,CAAC;IAC5C,MAAM,CAAC,UAAU,CAAC,kBAAkB,GAAG,MAAM,IAAA,gCAAmB,EAAC,IAAI,CAAC,CAAC;IACvE,MAAM,CAAC,YAAY,CAAC,mBAAmB;QACrC,IAAA,8CAAiC,EAAC,QAAQ,CAAC,CAAC;IAC9C,MAAM,CAAC,YAAY,CAAC,mBAAmB,GAAG,IAAA,oCAAuB,EAAC,QAAQ,CAAC,CAAC;IAC5E,MAAM,CAAC,YAAY,CAAC,mBAAmB,GAAG,IAAA,iCAAoB,EAAC,QAAQ,CAAC,CAAC;IACzE,MAAM,CAAC,YAAY,CAAC,gBAAgB,GAAG,IAAA,8BAAiB,EAAC,QAAQ,CAAC,CAAC;IACnE,MAAM,CAAC,YAAY,CAAC,eAAe,GAAG,IAAA,6BAAgB,EAAC,QAAQ,CAAC,CAAC;IAEjE,8DAA8D;IAC9D,IAAI,MAAM,CAAC,YAAY,CAAC,eAAe,EAAE;QACvC,OAAO;YACL,MAAM;YACN,QAAQ;SACT,CAAC;KACH;IAED,MAAM,CAAC,cAAc,CAAC,qBAAqB,GAAG,MAAM,IAAA,sCAAyB,EAC3E,QAAQ,CACT,CAAC;IACF,OAAO;QACL,MAAM;QACN,QAAQ;QACR,OAAO,EAAE,IAAA,2BAAc,EAAC,QAAQ,CAAC;KAClC,CAAC;AACJ,CAAC,CAAC;AA1DW,QAAA,QAAQ,YA0DnB","sourcesContent":["import { DEFAULT_ERRORS, File, TestResults } from \"src/domain\";\nimport { getFileDiff } from \"#/file\";\nimport {\n  assertConstantEipNumber,\n  assertConstantStatus,\n  assertEIP1EditorApprovals,\n  assertEIPEditorApproval,\n  assertFilenameAndFileNumbersMatch,\n  assertHasAuthors,\n  assertIsApprovedByAuthors,\n  assertValidFilename,\n  assertValidStatus,\n  requireAuthors,\n  requireFilePreexisting\n} from \"#/assertions\";\nimport { processError } from \"src/domain/exceptions\";\n\nexport const testFile = async (file: File): Promise<TestResults> => {\n  // we need to define this here because the below logic can get very complicated otherwise\n  const errors = DEFAULT_ERRORS;\n\n  // file testing is not compatible (yet) with an initialy undefined file\n  // so instead it's required here. It throws an exception for consistency\n  const fileDiff = await getFileDiff(file);\n  try {\n    file = await requireFilePreexisting(file);\n  } catch (err: any) {\n    processError(err, {\n      requirementViolation: (message) => {\n        errors.fileErrors.filePreexistingError = message;\n      }\n      // all other types will throw the exception\n    });\n\n    errors.approvalErrors.isEditorApprovedError = await assertEIPEditorApproval(\n      fileDiff\n    );\n    // new files are acceptable if an editor has approved\n    if (errors.approvalErrors.isEditorApprovedError) {\n      return {\n        errors,\n        fileDiff\n      };\n    }\n  }\n\n  errors.approvalErrors.isEditorApprovedError = await assertEIPEditorApproval(\n    fileDiff\n  );\n  errors.approvalErrors.enoughEditorApprovalsForEIP1Error =\n    await assertEIP1EditorApprovals(fileDiff);\n  errors.fileErrors.validFilenameError = await assertValidFilename(file);\n  errors.headerErrors.matchingEIPNumError =\n    assertFilenameAndFileNumbersMatch(fileDiff);\n  errors.headerErrors.constantEIPNumError = assertConstantEipNumber(fileDiff);\n  errors.headerErrors.constantStatusError = assertConstantStatus(fileDiff);\n  errors.headerErrors.validStatusError = assertValidStatus(fileDiff);\n  errors.authorErrors.hasAuthorsError = assertHasAuthors(fileDiff);\n\n  // if no authors then remaining items aren't relevant to check\n  if (errors.authorErrors.hasAuthorsError) {\n    return {\n      errors,\n      fileDiff\n    };\n  }\n\n  errors.approvalErrors.isAuthorApprovedError = await assertIsApprovedByAuthors(\n    fileDiff\n  );\n  return {\n    errors,\n    fileDiff,\n    authors: requireAuthors(fileDiff)\n  };\n};\n"]}