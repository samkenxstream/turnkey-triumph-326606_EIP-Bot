{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../../src/modules/main/modules/get_type/index.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  ChangeTypes,\n  ERRORS_TYPE_FILTER,\n  isChangeType,\n  isDefined,\n  TestResults\n} from \"src/domain\";\nimport { newEIPFile } from \"#/main/modules/get_type/new_eip_file\";\nimport { statusChange } from \"#/main/modules/get_type/status_change\";\nimport { updateEIP } from \"#/main/modules/get_type/update_eip\";\nimport _ from \"lodash\";\nimport {\n  getAllFalseObjectPaths,\n  getAllTruthyObjectPaths,\n  multiLineString\n} from \"#/utils\";\nimport { getLogs } from \"./logs\";\nimport { UnexpectedError } from \"src/domain/exceptions\";\n\nconst Logs = getLogs();\n\nconst Filters = {\n  [ChangeTypes.newEIPFile]: newEIPFile,\n  [ChangeTypes.statusChange]: statusChange,\n  [ChangeTypes.updateEIP]: updateEIP\n};\n\n// for tests\nexport const __Filters__ = Filters;\n\nexport const getType = (result: TestResults): ChangeTypes => {\n  const results = _.reduce(\n    Filters,\n    function (arr, val, key) {\n      Logs.typeCheckingHeader(isChangeType(key) ? key : ChangeTypes.ambiguous);\n      const res = testFilter(val, result);\n      if (res) {\n        return [...arr, key];\n      }\n      return arr;\n    },\n    [] as string[]\n  );\n\n  if (results.length === 1) {\n    const type = results[0]!;\n    if (isChangeType(type)) {\n      Logs.isType(type);\n      return type;\n    }\n  }\n  Logs.noMatchingTypes();\n\n  if (results.length > 2) {\n    throw new UnexpectedError(\n      multiLineString(\" \")(\n        \"this change meets the criteria for more than one type, which\",\n        `should never happen || [${results.join(\", \")}]`\n      )\n    );\n  }\n\n  // this captures all edgecases\n  return ChangeTypes.ambiguous;\n};\n\nconst testFilter = (\n  filter: ERRORS_TYPE_FILTER,\n  result: TestResults\n): boolean => {\n  const paths = {\n    mustNotHave: getAllFalseObjectPaths(filter),\n    mustHave: getAllTruthyObjectPaths(filter)\n  };\n\n  let violations = {\n    mustNotHave: [] as string[],\n    mustHave: [] as string[]\n  };\n\n  Logs.mustHaveHeader();\n  for (const path of paths.mustHave) {\n    const value = _.get(result.errors, path);\n\n    if (!isDefined(value)) {\n      violations.mustHave.push(path);\n      Logs.pathViolation(path);\n    }\n  }\n\n  Logs.mustNotHaveHeader();\n  for (const path of paths.mustNotHave) {\n    const value = _.get(result.errors, path);\n\n    if (isDefined(value)) {\n      violations.mustNotHave.push(path);\n      Logs.pathViolation(path);\n    }\n  }\n\n  return _.every(_.map(violations, (err) => _.isEmpty(err)));\n};\n"]}