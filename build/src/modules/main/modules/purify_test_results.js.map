{"version":3,"file":"purify_test_results.js","sourceRoot":"","sources":["../../../../../src/modules/main/modules/purify_test_results.ts"],"names":[],"mappings":";;;AACA,2CAKqB;AACrB,mCAAsE;AACtE,mCAA6B;AAC7B,yCAAqC;AAE9B,MAAM,iBAAiB,GAAG,KAAK,EACpC,gBAA6B,EACZ,EAAE;IACnB,8BAA8B;IAC9B,MAAM,eAAe,GAAG;QACtB,IAAA,uCAA2B,EAAC,gBAAgB,CAAC;QAC7C,IAAA,kCAAsB,EAAC,gBAAgB,CAAC;QACxC,IAAA,wBAAY,EAAC,gBAAgB,CAAC;QAC9B,IAAA,sCAA0B,EAAC,gBAAgB,CAAC;KAC7C,CAAC;IAEF,2BAA2B;IAC3B,MAAM,WAAW,GAAG,IAAA,0BAAkB,EAAC,gBAAgB,EAAE,eAAe,CAAC,CAAC;IAC1E,MAAM,MAAM,GAAa,IAAA,+BAAuB,EAAC,WAAW,CAAC,MAAM,CAAC,CAAC,GAAG,CACtE,CAAC,IAAI,EAAE,EAAE,CAAC,IAAA,YAAG,EAAC,WAAW,CAAC,MAAM,EAAE,IAAI,CAAC,CACxC,CAAC;IAEF,MAAM,IAAI,GAAG,IAAA,kBAAO,EAAC,WAAW,CAAC,CAAC;IAClC,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;QACvB,OAAO,CAAC,GAAG,CAAC,GAAG,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,UAAU,CAAC,CAAC;QACzD,OAAO;YACL,QAAQ,EAAE,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI;YACxC,IAAI;SACL,CAAC;KACH;IAED,OAAO;QACL,QAAQ,EAAE,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI;QACxC,MAAM;QACN,IAAI;KACL,CAAC;AACJ,CAAC,CAAC;AA/BW,QAAA,iBAAiB,qBA+B5B","sourcesContent":["import { Result, TestResults } from \"src/domain\";\nimport {\n  editorApprovalPurifier,\n  EIP1Purifier,\n  statusChangeAllowedPurifier,\n  withdrawnExceptionPurifier\n} from \"#/purifiers\";\nimport { getAllTruthyObjectPaths, innerJoinAncestors } from \"#/utils\";\nimport { get } from \"lodash\";\nimport { getType } from \"./get_type\";\n\nexport const purifyTestResults = async (\n  dirtyTestResults: TestResults\n): Promise<Result> => {\n  // Apply independent purifiers\n  const primedPurifiers = [\n    statusChangeAllowedPurifier(dirtyTestResults),\n    editorApprovalPurifier(dirtyTestResults),\n    EIP1Purifier(dirtyTestResults),\n    withdrawnExceptionPurifier(dirtyTestResults)\n  ];\n\n  // Purify the dirty results\n  const testResults = innerJoinAncestors(dirtyTestResults, primedPurifiers);\n  const errors: string[] = getAllTruthyObjectPaths(testResults.errors).map(\n    (path) => get(testResults.errors, path)\n  );\n\n  const type = getType(testResults);\n  if (errors.length === 0) {\n    console.log(`${testResults.fileDiff.base.name} passed!`);\n    return {\n      filename: testResults.fileDiff.base.name,\n      type\n    };\n  }\n\n  return {\n    filename: testResults.fileDiff.base.name,\n    errors,\n    type\n  };\n};\n"]}