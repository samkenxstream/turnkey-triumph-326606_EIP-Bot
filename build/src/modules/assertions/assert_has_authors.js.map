{"version":3,"file":"assert_has_authors.js","sourceRoot":"","sources":["../../../../src/modules/assertions/assert_has_authors.ts"],"names":[],"mappings":";;;AAEA,mCAA0C;AAE1C,MAAa,gBAAgB;IAC3B;QAEA,qBAAgB,GAAG,CAAC,IAAc,EAAE,EAAE;YACpC,6EAA6E;YAC7E,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAE5D,8BAA8B;YAC9B,IAAI,CAAC,OAAO,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;gBACpC,OAAO,IAAA,uBAAe,EAAC,GAAG,CAAC,CACzB,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,kCAAkC,EACnD,wDAAwD,CACzD,CAAC;aACH;;gBAAM,OAAO;QAChB,CAAC,CAAC;IAba,CAAC;CAcjB;AAfD,4CAeC","sourcesContent":["import { FileDiff } from \"src/domain\";\nimport { IAssertHasAuthors } from \"#/assertions/Domain/types\";\nimport { multiLineString } from \"#/utils\";\n\nexport class AssertHasAuthors implements IAssertHasAuthors {\n  constructor() {}\n\n  assertHasAuthors = (file: FileDiff) => {\n    // take from base to avoid people adding themselves and being able to approve\n    const authors = file.base.authors && [...file.base.authors];\n\n    // Make sure there are authors\n    if (!authors || authors.length === 0) {\n      return multiLineString(\" \")(\n        `${file.head.name} has no identifiable authors who`,\n        `can approve the PR (only considering the base version)`\n      );\n    } else return;\n  };\n}\n"]}