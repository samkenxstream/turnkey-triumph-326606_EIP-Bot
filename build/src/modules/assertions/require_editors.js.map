{"version":3,"file":"require_editors.js","sourceRoot":"","sources":["../../../../src/modules/assertions/require_editors.ts"],"names":[],"mappings":"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","sourcesContent":["import { EIPCategory, EIPTypes, FileDiff, EipStatus } from \"src/domain\";\nimport { IRequireEditors } from \"#/assertions/Domain/types\";\nimport _ from \"lodash\";\nimport { RequirementViolation } from \"src/domain/exceptions\";\n\nexport class RequireEditors implements IRequireEditors {\n  public requireAuthors: (fileDiff: FileDiff) => string[];\n  public ERC_EDITORS: () => string[];\n  public CORE_EDITORS: () => string[];\n  public INFORMATIONAL_EDITORS: () => string[];\n  public INTERFACE_EDITORS: () => string[];\n  public META_EDITORS: () => string[];\n  public NETWORKING_EDITORS: () => string[];\n\n  constructor({\n    requireAuthors,\n    ERC_EDITORS,\n    CORE_EDITORS,\n    INFORMATIONAL_EDITORS,\n    INTERFACE_EDITORS,\n    META_EDITORS,\n    NETWORKING_EDITORS\n  }) {\n    this.requireAuthors = requireAuthors;\n    this.ERC_EDITORS = ERC_EDITORS;\n    this.CORE_EDITORS = CORE_EDITORS;\n    this.INFORMATIONAL_EDITORS = INFORMATIONAL_EDITORS;\n    this.INTERFACE_EDITORS = INTERFACE_EDITORS;\n    this.META_EDITORS = META_EDITORS;\n    this.NETWORKING_EDITORS = NETWORKING_EDITORS;\n  }\n\n  // injected to make testing easier\n  _requireEIPEditors(EDITORS: string[], fileDiff?: FileDiff) {\n    EDITORS = _.uniq(EDITORS.map((i) => i.toLowerCase()));\n    if (fileDiff) {\n      const authors = this.requireAuthors(fileDiff);\n      return EDITORS.filter((editor) => !authors.includes(editor));\n    } else {\n      console.warn(\n        [\n          \"You are requesting all of the EIP_EDITORS, but an edgecase may exist where\",\n          \"an editor is also an author; it's recommended that you instead request the\",\n          \"editors with respect to a fileDiff\"\n        ].join(\" \")\n      );\n      return EDITORS;\n    }\n  }\n\n  requireEIPEditors(fileDiff?: FileDiff) {\n    const {\n      ERC_EDITORS,\n      CORE_EDITORS,\n      INFORMATIONAL_EDITORS,\n      INTERFACE_EDITORS,\n      META_EDITORS,\n      NETWORKING_EDITORS\n    } = this;\n\n    if (!fileDiff || fileDiff.base.status === EipStatus.living) {\n      // if no fileDiff is provided (meaning it's a new file) then return all editors\n      return this._requireEIPEditors(\n        _.concat(\n          ERC_EDITORS(),\n          CORE_EDITORS(),\n          NETWORKING_EDITORS(),\n          INTERFACE_EDITORS(),\n          META_EDITORS(),\n          INFORMATIONAL_EDITORS()\n        )\n      );\n    }\n\n    const isERC = fileDiff.base.category === EIPCategory.erc;\n    const isCore = fileDiff.base.category === EIPCategory.core;\n    const isNetworking = fileDiff.base.category === EIPCategory.networking;\n    const isInterface = fileDiff.base.category === EIPCategory.interface;\n    const isMeta = fileDiff.base.type === EIPTypes.meta;\n    const isInformational = fileDiff.base.type === EIPTypes.informational;\n\n    if (isERC) {\n      return this._requireEIPEditors(ERC_EDITORS(), fileDiff);\n    }\n\n    if (isCore) {\n      return this._requireEIPEditors(CORE_EDITORS(), fileDiff);\n    }\n\n    if (isNetworking) {\n      return this._requireEIPEditors(NETWORKING_EDITORS(), fileDiff);\n    }\n\n    if (isInterface) {\n      return this._requireEIPEditors(INTERFACE_EDITORS(), fileDiff);\n    }\n\n    // these types need to be below category to prevent mismatching categories\n    if (isMeta) {\n      return this._requireEIPEditors(META_EDITORS(), fileDiff);\n    }\n\n    if (isInformational) {\n      return this._requireEIPEditors(INFORMATIONAL_EDITORS(), fileDiff);\n    }\n\n    throw new RequirementViolation(\n      [\n        `the fileDiff for '${fileDiff?.base.name}' with category '${fileDiff?.base.category}'`,\n        `was neither seen to be a core or erc eip while fetching the editors. This should`,\n        `never happen`\n      ].join(\" \")\n    );\n  }\n}\n"]}