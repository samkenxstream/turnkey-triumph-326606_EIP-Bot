{"version":3,"file":"require_authors.js","sourceRoot":"","sources":["../../../../src/modules/assertions/require_authors.ts"],"names":[],"mappings":";;;AACA,sDAA6D;AAG7D,MAAa,cAAc;IACzB;QAEA,mBAAc,GAAG,CAAC,QAAkB,EAAY,EAAE;YAChD,6EAA6E;YAC7E,MAAM,OAAO,GAAG,QAAQ,CAAC,IAAI,CAAC,OAAO,IAAI,CAAC,GAAG,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAEpE,8BAA8B;YAC9B,IAAI,CAAC,OAAO,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;gBACpC,MAAM,IAAI,iCAAoB,CAC5B,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,yFAAyF,CAC/G,CAAC;aACH;YAED,OAAO,OAAO,CAAC;QACjB,CAAC,CAAC;IAda,CAAC;CAejB;AAhBD,wCAgBC","sourcesContent":["import { FileDiff } from \"src/domain\";\nimport { RequirementViolation } from \"src/domain/exceptions\";\nimport { IRequireAuthors } from \"#/assertions/Domain/types\";\n\nexport class RequireAuthors implements IRequireAuthors {\n  constructor() {}\n\n  requireAuthors = (fileDiff: FileDiff): string[] => {\n    // take from base to avoid people adding themselves and being able to approve\n    const authors = fileDiff.base.authors && [...fileDiff.base.authors];\n\n    // Make sure there are authors\n    if (!authors || authors.length === 0) {\n      throw new RequirementViolation(\n        `${fileDiff.head.name} has no identifiable authors who can approve the PR (only considering the base version)`\n      );\n    }\n\n    return authors;\n  };\n}\n"]}