{"version":3,"file":"require_file_preexisting.js","sourceRoot":"","sources":["../../../../src/modules/assertions/require_file_preexisting.ts"],"names":[],"mappings":";;;AAAA,uCAA0E;AAK1E,sDAA8E;AAC9E,mCAA0C;AAE1C,MAAa,sBAAsB;IACjC,YACS,SAA4B,EAC5B,sBAGkB;QAJlB,cAAS,GAAT,SAAS,CAAmB;QAC5B,2BAAsB,GAAtB,sBAAsB,CAGJ;IACxB,CAAC;IAEJ;;;;OAIG;IACH,KAAK,CAAC,sBAAsB,CAAC,IAAU;QACrC,MAAM,EAAE,GAAG,MAAM,IAAI,CAAC,SAAS,EAAE,CAAC;QAClC,MAAM,QAAQ,GAAG,IAAI,CAAC,iBAAiB,IAAI,IAAI,CAAC,QAAQ,CAAC;QAEzD,IAAI,CAAC,IAAA,kBAAS,EAAC,QAAQ,CAAC,EAAE;YACxB,MAAM,IAAI,4BAAe,CACvB,IAAA,uBAAe,EAAC,GAAG,CAAC,CAClB,6CAA6C,EAC7C,6BAA6B,CAC9B,EACD;gBACE,EAAE;gBACF,IAAI;aACL,CACF,CAAC;SACH;QAED,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,sBAAsB,CAC7C,QAAQ,EACR,EAAE,CAAC,IAAI,CAAC,GAAG,CACZ,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC;QAEtB,IACE,CAAC,IAAA,kBAAS,EAAC,KAAK,CAAC,IAAI,KAAK,CAAC,MAAM,KAAK,GAAG,CAAC;YAC1C,IAAI,CAAC,MAAM,KAAK,mBAAU,CAAC,KAAK,EAChC;YACA,MAAM,IAAI,iCAAoB,CAC5B,IAAA,uBAAe,EAAC,GAAG,CAAC,CAClB,kBAAkB,QAAQ,wCAAwC,CACnE,CACF,CAAC;SACH;QAED,OAAO,IAAuB,CAAC;IACjC,CAAC;CACF;AAjDD,wDAiDC","sourcesContent":["import { ContentData, File, FileStatus, isDefined, PR } from \"src/domain\";\nimport {\n  IRequireFilePreexisting,\n  PreexistingFile\n} from \"#/assertions/Domain/types\";\nimport { RequirementViolation, UnexpectedError } from \"src/domain/exceptions\";\nimport { multiLineString } from \"#/utils\";\n\nexport class RequireFilePreexisting implements IRequireFilePreexisting {\n  constructor(\n    public requirePr: () => Promise<PR>,\n    public getRepoFilenameContent: (\n      filename: string,\n      sha: string\n    ) => Promise<ContentData>\n  ) {}\n\n  /**\n   *  accepts a standard File object and throws an error if the status is new or\n   *  it does not exist at the base commit; uses the file's previous_filename if\n   *  it exists.\n   */\n  async requireFilePreexisting(file: File): Promise<PreexistingFile> {\n    const pr = await this.requirePr();\n    const filename = file.previous_filename || file.filename;\n\n    if (!isDefined(filename)) {\n      throw new UnexpectedError(\n        multiLineString(\" \")(\n          `the file did not have a previous or current`,\n          `filename associated with it`\n        ),\n        {\n          pr,\n          file\n        }\n      );\n    }\n\n    const error = await this.getRepoFilenameContent(\n      filename,\n      pr.base.sha\n    ).catch((err) => err);\n\n    if (\n      (isDefined(error) && error.status === 404) ||\n      file.status === FileStatus.added\n    ) {\n      throw new RequirementViolation(\n        multiLineString(\" \")(\n          `File with name ${filename} is new and new files must be reviewed`\n        )\n      );\n    }\n\n    return file as PreexistingFile;\n  }\n}\n"]}