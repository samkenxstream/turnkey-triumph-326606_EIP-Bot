{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../../../src/modules/assertions/Domain/types.ts"],"names":[],"mappings":"","sourcesContent":["import { File, FileDiff } from \"src/domain\";\nimport { Opaque } from \"type-fest\";\n\nexport interface IRequireEditors {\n  _requireEIPEditors: (EDITORS: string[], fileDiff?: FileDiff) => string[];\n  requireEIPEditors: (fileDiff?: FileDiff) => string[];\n}\n\nexport type PreexistingFile = Opaque<File>;\n\nexport interface IRequireFilePreexisting {\n  requireFilePreexisting: (fileDiff: File) => Promise<PreexistingFile>;\n}\n\nexport interface IAssertValidFilename {\n  assertValidFilename: (file: NonNullable<File>) => Promise<string | undefined>;\n}\n\nexport interface IRequireFilenameEIPNum {\n  requireFilenameEipNum: (filename: string, path: string) => Promise<number>;\n  attemptAssetGracefulTermination: (filename: string) => Promise<void>;\n  attemptEditorApprovalGracefulTermination: (filename: string) => Promise<void>;\n  attemptNewFileNoEIPNumber: (filename: string, path: string) => Promise<void>;\n}\n\nexport interface IAssertHasAuthors {\n  /**\n   * assert that authors exist for the EIP at the PRs base commit\n   *\n   * @param file file diff of a given file\n   * @returns list of raw author data\n   */\n  assertHasAuthors: (file: FileDiff) => string | undefined;\n}\n\nexport interface IRequireAuthors {\n  /**\n   * requires that authors exist and returns them else throw error\n   *\n   * @param file file diff of a given file\n   * @returns list of raw author data\n   */\n  requireAuthors: (fileDiff: FileDiff) => string[];\n}\n\nexport interface IAssertEIP1EditorApprovals {\n  /**\n   * requires a set number of editor approvals\n   */\n  assertEIP1EditorApprovals: (\n    fileDiff: FileDiff\n  ) => Promise<string | undefined>;\n}\n"]}