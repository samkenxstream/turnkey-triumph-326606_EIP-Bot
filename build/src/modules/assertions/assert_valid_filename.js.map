{"version":3,"file":"assert_valid_filename.js","sourceRoot":"","sources":["../../../../src/modules/assertions/assert_valid_filename.ts"],"names":[],"mappings":";;;AAAA,uCAA2C;AAE3C,mCAA0C;AAE1C,MAAa,mBAAmB;IAG9B,YAAY,EACV,qBAAqB,EAGtB;QAID;;;;;WAKG;QACH,wBAAmB,GAAG,KAAK,EAAE,IAAuB,EAAE,EAAE;YACtD,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;YAE/B,6DAA6D;YAC7D,MAAM,KAAK,GAAG,QAAQ,CAAC,MAAM,CAAC,gBAAO,CAAC,CAAC;YACvC,IAAI,KAAK,KAAK,CAAC,CAAC,EAAE;gBAChB,OAAO,IAAA,uBAAe,EAAC,GAAG,CAAC,CACzB,YAAY,QAAQ,2CAA2C,EAC/D,mEAAmE,EACnE,gEAAgE,EAChE,qBAAqB,CACtB,CAAC;aACH;YAED,8DAA8D;YAC9D,mDAAmD;YACnD,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,QAAQ,CAAC,CAAC;YAClE,IAAI,CAAC,cAAc,EAAE;gBACnB,OAAO,0DAA0D,QAAQ,EAAE,CAAC;aAC7E;YAED,OAAO;QACT,CAAC,CAAC;QA/BA,IAAI,CAAC,qBAAqB,GAAG,qBAAqB,CAAC;IACrD,CAAC;CA+BF;AAxCD,kDAwCC","sourcesContent":["import { File, FILE_RE } from \"src/domain\";\nimport { IAssertValidFilename } from \"#/assertions/Domain/types\";\nimport { multiLineString } from \"#/utils\";\n\nexport class AssertValidFilename implements IAssertValidFilename {\n  requireFilenameEipNum: (path: string) => Promise<number>;\n\n  constructor({\n    requireFilenameEipNum\n  }: {\n    requireFilenameEipNum: (path: string) => Promise<number>;\n  }) {\n    this.requireFilenameEipNum = requireFilenameEipNum;\n  }\n\n  /**\n   * Accepts a file and returns whether or not its name is valid\n   *\n   * @param errors a list to add any errors that occur to\n   * @returns {boolean} is the provided file's filename valid?\n   */\n  assertValidFilename = async (file: NonNullable<File>) => {\n    const filename = file.filename;\n\n    // File name is formatted correctly and is in the EIPS folder\n    const match = filename.search(FILE_RE);\n    if (match === -1) {\n      return multiLineString(\" \")(\n        `Filename ${filename} is not in EIP format 'EIPS/eip-####.md';`,\n        `if this is a new submission (and prior to eip # being given) then`,\n        `format your file like so 'eip-draft_{summary of eip}.md (don't`,\n        `include the braces)`\n      );\n    }\n\n    // EIP number is defined within the filename and can be parsed\n    // filename is actually path when fetching directly\n    const filenameEipNum = await this.requireFilenameEipNum(filename);\n    if (!filenameEipNum) {\n      return `No EIP number was found to be associated with filename ${filename}`;\n    }\n\n    return;\n  };\n}\n"]}