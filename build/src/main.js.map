{"version":3,"file":"main.js","sourceRoot":"","sources":["../../src/main.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,wCAA0C;AAC1C,6CAGsB;AACtB,wDAA+D;AAC/D,uCAOoB;AACpB,iDAAiC;AACjC,2CAA+C;AAC/C,sDAI+B;AAC/B,mCAA0C;AAC1C,wDAAoD;AACpD,4EAAuE;AACvE,4EAAuE;AAEhE,MAAM,MAAM,GAAG,KAAK,IAAI,EAAE;IAC/B,MAAM,EAAE,GAAG,MAAM,IAAA,sBAAS,GAAE,CAAC;IAE7B,4EAA4E;IAC5E,MAAM,KAAK,GAAG,MAAM,IAAA,yBAAY,EAAC,EAAE,CAAC,CAAC;IACrC,IAAI,OAAO,GAAY,EAAE,CAAC;IAC1B,IAAI,KAAK,EAAE,MAAM,IAAI,IAAI,KAAK,EAAE;QAC9B,IAAI;YACF,MAAM,gBAAgB,GAAG,MAAM,IAAA,oBAAQ,EAAC,IAAI,CAAC,CAAC;YAC9C,MAAM,WAAW,GAAG,MAAM,IAAA,uCAAiB,EAAC,gBAAgB,CAAC,CAAC;YAC9D,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;SAC3B;QAAC,OAAO,GAAQ,EAAE;YACjB,IAAA,yBAAY,EAAC,GAAG,EAAE;gBAChB,mBAAmB,EAAE,CAAC,OAAO,EAAE,EAAE;oBAC/B,OAAO,CAAC,IAAI,CAAC;wBACX,QAAQ,EAAE,IAAI,CAAC,QAAQ;wBACvB,cAAc,EAAE,OAAO;wBACvB,IAAI,EAAE,oBAAW,CAAC,SAAS;qBAC5B,CAAC,CAAC;gBACL,CAAC;gBACD,oBAAoB,EAAE,CAAC,OAAO,EAAE,EAAE;oBAChC,OAAO,CAAC,IAAI,CAAC;wBACX,QAAQ,EAAE,IAAI,CAAC,QAAQ;wBACvB,MAAM,EAAE,CAAC,OAAO,CAAC;wBACjB,IAAI,EAAE,oBAAW,CAAC,SAAS;qBAC5B,CAAC,CAAC;gBACL,CAAC;gBACD,eAAe,EAAE,CAAC,OAAO,EAAE,IAAI,EAAE,EAAE;oBACjC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;oBAC3C,OAAO,GAAG,oCAAoC,IAAA,oBAAW,GAAE,CAAC,IAAI,CAC9D,IAAI,CACL,MAAM,OAAO,EAAE,CAAC;oBACjB,OAAO,CAAC,IAAI,CAAC;wBACX,QAAQ,EAAE,IAAI,CAAC,QAAQ;wBACvB,MAAM,EAAE,CAAC,OAAO,CAAC;wBACjB,IAAI,EAAE,oBAAW,CAAC,SAAS;qBAC5B,CAAC,CAAC;gBACL,CAAC;aACF,CAAC,CAAC;SACJ;KACF;IAED,mCAAmC;IACnC,MAAM,cAAc,GAAG,gBAAC,CAAC,IAAI,CAAC,gBAAC,CAAC,GAAG,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC;IACtD,MAAM,+BAAmB,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC;IAEvD,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE;QAC/C,MAAM,cAAc,GAAG,IAAA,uCAAiB,EACtC,OAAO,EACP,mCAAmC,CACpC,CAAC;QACF,MAAM,+BAAmB,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC;QACtD,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;QAC5B,OAAO;KACR;IAED,MAAM,cAAc,GAAG,IAAA,uCAAiB,EAAC,OAAO,CAAC,CAAC;IAElD,yEAAyE;IACzE,IAAI,IAAA,eAAM,GAAE,EAAE;QACZ,MAAM,+BAAmB,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC;QACtD,MAAM,IAAA,4BAAgB,EACpB,IAAA,aAAI,EAAC,OAAO,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,OAAO,CAAa,CAAC,CACzE,CAAC;KACH;IAED,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;IAC5B,OAAO,IAAA,gBAAS,EAAC,cAAc,CAAC,CAAC;AACnC,CAAC,CAAC;AApEW,QAAA,MAAM,UAoEjB;AAEK,MAAM,KAAK,GAAG,CAAC,MAAuC,EAAE,EAAE,CAAC,KAAK,IAAI,EAAE;IAC3E,IAAI;QACF,OAAO,MAAM,MAAM,EAAE,CAAC;KACvB;IAAC,OAAO,KAAU,EAAE;QACnB,MAAM,IAAA,yBAAY,EAAC,KAAK,EAAE;YACxB,QAAQ,EAAE,KAAK,EAAE,UAAU,EAAE,IAAI,EAAE,EAAE;gBACnC,MAAM,OAAO,GAAG,IAAA,uBAAe,EAAC,IAAI,CAAC,CACnC,oCAAoC,EACpC,cAAc,UAAU,CAAC,WAAW,EAAE,EAAE,EACxC,IAAI,IAAI,YAAY,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,EACnD,IAAA,iCAAoB,GAAE,CACvB,CAAC;gBAEF,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;gBACrB,IAAI,IAAA,eAAM,GAAE,EAAE;oBACZ,MAAM,+BAAmB,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;iBAChD;gBAED,IAAA,gBAAS,EAAC,OAAO,CAAC,CAAC;gBACnB,MAAM,OAAO,CAAC;YAChB,CAAC;YACD,SAAS,EAAE,KAAK,EAAE,KAAU,EAAE,EAAE;gBAC9B,mEAAmE;gBACnE,IACE,IAAA,mCAA0B,EAAC,KAAK,CAAC;oBACjC,IAAA,gCAAuB,EAAC,KAAK,CAAC,EAC9B;oBACA,MAAM,KAAK,CAAC;iBACb;gBAED,MAAM,OAAO,GACX,IAAA,qCAAwB,EAAC,KAAK,CAAC,GAAG,IAAA,iCAAoB,GAAE,CAAC;gBAE3D,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;gBACrB,IAAI,IAAA,eAAM,GAAE,EAAE;oBACZ,MAAM,+BAAmB,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;iBAChD;gBAED,IAAA,gBAAS,EAAC,OAAO,CAAC,CAAC;gBACnB,MAAM,OAAO,CAAC;YAChB,CAAC;SACF,CAAC,CAAC;KACJ;AACH,CAAC,CAAC;AA3CW,QAAA,KAAK,SA2ChB;AAEW,QAAA,IAAI,GAAG,IAAA,aAAK,EAAC,cAAM,CAAC,CAAC","sourcesContent":["import { setFailed } from \"@actions/core\";\nimport {\n  requireFiles,\n  requirePr\n} from \"#/assertions\";\nimport { PullRequestUseCases } from \"#/pull_request/use_cases\";\nimport {\n  ChangeTypes,\n  isNockDisallowedNetConnect,\n  isNockNoMatchingRequest,\n  isProd,\n  MAINTAINERS,\n  Results\n} from \"src/domain\";\nimport _, { uniq } from \"lodash\";\nimport { requestReviewers } from \"#/approvals\";\nimport {\n  getMaintainersString,\n  getUnhandledErrorMessage,\n  processError\n} from \"src/domain/exceptions\";\nimport { multiLineString } from \"#/utils\";\nimport { testFile } from \"#/main/modules/test_file\";\nimport { purifyTestResults } from \"#/main/modules/purify_test_results\";\nimport { getCommentMessage } from \"#/main/modules/get_comment_message\";\n\nexport const _main_ = async () => {\n  const pr = await requirePr();\n\n  // Collect the changes made in the given PR from base <-> head for eip files\n  const files = await requireFiles(pr);\n  let results: Results = [];\n  for await (const file of files) {\n    try {\n      const dirtyTestResults = await testFile(file);\n      const testResults = await purifyTestResults(dirtyTestResults);\n      results.push(testResults);\n    } catch (err: any) {\n      processError(err, {\n        gracefulTermination: (message) => {\n          results.push({\n            filename: file.filename,\n            successMessage: message,\n            type: ChangeTypes.ambiguous\n          });\n        },\n        requirementViolation: (message) => {\n          results.push({\n            filename: file.filename,\n            errors: [message],\n            type: ChangeTypes.ambiguous\n          });\n        },\n        unexpectedError: (message, data) => {\n          console.log(JSON.stringify(data, null, 2));\n          message = `An unexpected error occurred (cc ${MAINTAINERS().join(\n            \", \"\n          )}): ${message}`;\n          results.push({\n            filename: file.filename,\n            errors: [message],\n            type: ChangeTypes.ambiguous\n          });\n        }\n      });\n    }\n  }\n\n  // updates labels to be as expected\n  const expectedLabels = _.uniq(_.map(results, \"type\"));\n  await PullRequestUseCases.updateLabels(expectedLabels);\n\n  if (!results.filter((res) => res.errors).length) {\n    const commentMessage = getCommentMessage(\n      results,\n      \"All tests passed; auto-merging...\"\n    );\n    await PullRequestUseCases.postComment(commentMessage);\n    console.log(commentMessage);\n    return;\n  }\n\n  const commentMessage = getCommentMessage(results);\n\n  // to avoid annoying people, it's best to only do this while running prod\n  if (isProd()) {\n    await PullRequestUseCases.postComment(commentMessage);\n    await requestReviewers(\n      uniq(results.flatMap((res) => res.mentions).filter(Boolean) as string[])\n    );\n  }\n\n  console.log(commentMessage);\n  return setFailed(commentMessage);\n};\n\nexport const _main = (_main_: () => Promise<undefined | void>) => async () => {\n  try {\n    return await _main_();\n  } catch (error: any) {\n    await processError(error, {\n      critical: async (errMessage, data) => {\n        const message = multiLineString(\"\\n\")(\n          `A critical exception has occurred:`,\n          `\\tMessage: ${errMessage.toLowerCase()}`,\n          data && `\\tData:\\n${JSON.stringify(data, null, 2)}`,\n          getMaintainersString()\n        );\n\n        console.log(message);\n        if (isProd()) {\n          await PullRequestUseCases.postComment(message);\n        }\n\n        setFailed(message);\n        throw message;\n      },\n      unhandled: async (error: any) => {\n        // useful for making sure that auto-mocking can function (dev tool)\n        if (\n          isNockDisallowedNetConnect(error) ||\n          isNockNoMatchingRequest(error)\n        ) {\n          throw error;\n        }\n\n        const message =\n          getUnhandledErrorMessage(error) + getMaintainersString();\n\n        console.log(message);\n        if (isProd()) {\n          await PullRequestUseCases.postComment(message);\n        }\n\n        setFailed(message);\n        throw message;\n      }\n    });\n  }\n};\n\nexport const main = _main(_main_);\n"]}