{"version":3,"file":"exceptions.js","sourceRoot":"","sources":["../../../src/domain/exceptions.ts"],"names":[],"mappings":"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","sourcesContent":["import { Maybe } from \"./Types\";\nimport { multiLineString, MultiLineString, OR } from \"#/utils\";\nimport _ from \"lodash\";\nimport { MAINTAINERS } from \"src/domain/Constants\";\nimport { declareType, GithubHandle } from \"src/domain/typeDeclaratives\";\n\nexport enum Exceptions {\n  unexpectedError = \"Unexpected Error\",\n  requirementViolation = \"Requirement Violation\",\n  gracefulTermination = \"Graceful Termination\",\n  critical = \"Critical Error\",\n  unhandled = \"Unhandled Exception\"\n}\n\nexport class UnexpectedError {\n  public readonly type = \"Unexpected Error\";\n\n  constructor(\n    public error: Maybe<string> = null,\n    public data: Maybe<any> = null\n  ) {}\n}\n\nexport class RequirementViolation {\n  public readonly type = \"Requirement Violation\";\n\n  constructor(\n    public error: Maybe<string> = null,\n    public data: Maybe<any> = null\n  ) {}\n}\n\n/**\n *  this terminates the program gracefully, meaning that it will not be treated\n *  as an error. This is useful in cases where an invariant violation does not\n *  necessarily mean that the test fails.\n * */\nexport class GracefulTermination {\n  public readonly type = \"Graceful Termination\";\n\n  constructor(\n    public error: Maybe<string> = null,\n    public data: Maybe<any> = null\n  ) {}\n}\n\n/**\n * this is used when something happens and the whole program needs to be stopped\n * immediately, it's generally relevant for things like no PR or failed configs\n * */\nexport class CriticalError {\n  public readonly type = Exceptions.critical;\n\n  constructor(\n    public error: Maybe<string> = null,\n    public data: Maybe<any> = null\n  ) {}\n}\n\ntype Handlers = {\n  [key in keyof Omit<typeof Exceptions, \"unhandled\">]: (\n    message: string,\n    data?: any\n  ) => any;\n} & { unhandled: (error: any) => any };\n\n/**\n * this is written out on purpose to allow for easier changes where necessary\n * it will throw an exception for anything that's not handled\n * */\nexport const processError = (\n  err: any,\n  {\n    gracefulTermination,\n    unexpectedError,\n    requirementViolation,\n    critical,\n    unhandled\n  }: Partial<Handlers>\n) => {\n  if (err?.type === Exceptions.gracefulTermination) {\n    if (gracefulTermination) return gracefulTermination(err.error, err.data);\n  }\n\n  if (err?.type === Exceptions.requirementViolation) {\n    if (requirementViolation) return requirementViolation(err.error, err.data);\n  }\n\n  if (err?.type === Exceptions.unexpectedError) {\n    if (unexpectedError) return unexpectedError(err.error, err.data);\n  }\n\n  if (err?.type === Exceptions.critical) {\n    if (critical) return critical(err.error, err.data);\n  }\n\n  if (unhandled) return unhandled(err);\n\n  throw err;\n};\n\nexport type Exception =\n  | RequirementViolation\n  | UnexpectedError\n  | CriticalError\n  | GracefulTermination;\n\nexport function isException(maybeException): maybeException is Exception {\n  if (!Object.values(Exceptions).includes(maybeException?.type)) {\n    // recycles the exception\n    return false;\n  }\n  return true;\n}\n\n/**\n * calls function provided and either returns output directly or it\n * processes the error via the standard exception handler.\n * */\nexport const tryCatch = <Func extends () => any>(\n  func: Func,\n  handlers: Partial<Handlers>\n) => {\n  try {\n    return func();\n  } catch (err) {\n    return processError(err, handlers);\n  }\n};\n\n/** accepts any error object and then builds a meaningful message */\nexport const getUnhandledErrorMessage = (error: any) => {\n  if (!error) {\n    return \"a critical and unhandled exception occurred but there was no error\";\n  }\n\n  let message = new MultiLineString(\n    `A critical and unhandled exception has occurred:`\n  );\n\n  const hasErrMessage = OR(!!error.error, !!error.message?.toLowerCase());\n  if (hasErrMessage) {\n    error.error && message.addLine(`\\tMessage: ${error.error}`);\n    error.message &&\n      message.addLine(`\\tMessage: ${error.message?.toLowerCase()}`);\n  } else {\n    message.addLine(`\\tMessage: (no error message was provided)`);\n  }\n\n  const hasErrData = !OR(_.isNil(error.data), _.isEmpty(error.data));\n  if (hasErrData) {\n    message.addLine(`\\tData:`);\n    message.addLine(`${JSON.stringify(error.data, null, 2)}`);\n  } else {\n    message.addLine(`\\tData: (there is no data for this error)`);\n  }\n\n  const hasNeitherDataNorMessage = !OR(hasErrMessage, hasErrData);\n  if (hasNeitherDataNorMessage) {\n    message.addLine(\n      `Raw Stringified Error: (doing this because no message or data)`\n    );\n    message.addLine(JSON.stringify(error, null, 2));\n  }\n\n  return message.message;\n};\n\nexport const getMaintainersString = () => {\n  const maintainers: {\n    success: boolean;\n    value: string | [GithubHandle, ...GithubHandle[]];\n  } = tryCatch(\n    () => {\n      return {\n        success: true,\n        value: MAINTAINERS()\n      };\n    },\n    {\n      critical: (message) => {\n        return {\n          success: false,\n          value: message\n        };\n      },\n      // this will run for any error type other than critical\n      unhandled: (error) => {\n        return {\n          success: false,\n          value: getUnhandledErrorMessage(error)\n        };\n      }\n    }\n  );\n\n  if (maintainers.success) {\n    declareType<[GithubHandle, ...GithubHandle[]]>(maintainers.value);\n    return `(cc ${maintainers.value.join(\", \")})`;\n  }\n\n  declareType<string>(maintainers.value);\n  return multiLineString(\"\\n\")(\n    `An error occurred while mentioning maintainers:`,\n    `\\t` + maintainers.value\n  );\n};\n"]}