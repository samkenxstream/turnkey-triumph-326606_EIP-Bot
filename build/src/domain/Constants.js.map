{"version":3,"file":"Constants.js","sourceRoot":"","sources":["../../../src/domain/Constants.ts"],"names":[],"mappings":"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","sourcesContent":["import { Opaque } from \"type-fest\";\nimport { ERRORS, Maybe, NodeEnvs } from \"./Types\";\nimport { AND } from \"#/utils\";\nimport { CriticalError, RequirementViolation, UnexpectedError } from \"src/domain/exceptions\";\nimport { assertGithubHandle, GithubHandle } from \"./typeDeclaratives\";\nimport _ from \"lodash\";\n\n// this is meant to be a public key associated with a orphaned account;\n// it is encoded / decoded here because github will invalidate it if it knows\n// that its public (so shhh); also this key will never expire\nexport const PUBLIC_GITHUB_KEY = Buffer.from(\n  \"Z2hwX1hvVVBlcFpTUkdWWmFVdDRqOW44SHFSUloxNVlIZTFlNW82bw==\",\n  \"base64\"\n).toString(\"ascii\");\n\nexport const MERGE_MESSAGE = `\n    Hi, I'm a bot! This change was automatically merged because:\n    - It only modifies existing Draft, Review, or Last Call EIP(s)\n    - The PR was approved or written by at least one author of each modified EIP\n    - The build is passing\n    `;\n\nexport const COMMENT_HEADER =\n  \"Hi! I'm a bot, and I wanted to automerge your PR, but couldn't because of the following issue(s):\\n\\n\";\nexport const GITHUB_TOKEN = process.env.GITHUB_TOKEN || PUBLIC_GITHUB_KEY;\n\nconst handleStringToArray = (str?: string) =>\n  str && str.split(\",\").map((str) => str.trim());\n\nexport function assertEditorsFormat(\n  maybeEditors: string[] | undefined | \"\"\n): asserts maybeEditors is [GithubHandle, ...GithubHandle[]] {\n  if (!maybeEditors || !maybeEditors.length) {\n    console.log(\n      [\n        `at least one editor must be provided, you provided these environment variables`,\n        `\\tERC_EDITORS: ${process.env.ERC_EDITORS}`,\n        `\\tCORE_EDITORS: ${process.env.CORE_EDITORS}`,\n        `these were then parsed to become`,\n        `\\tERC_EDITORS: ${JSON.stringify(\n          handleStringToArray(process.env.ERC_EDITORS)\n        )}`,\n        `\\tCORE_EDITORS: ${JSON.stringify(\n          handleStringToArray(process.env.CORE_EDITORS)\n        )}`\n      ].join(\"\\n\")\n    );\n    throw new CriticalError(\"at least one editor must be provided\");\n  }\n\n  for (const maybeEditor of maybeEditors) {\n    assertGithubHandle(maybeEditor);\n  }\n}\n\nexport function assertMaintainersFormat(\n  maybeMaintainers: string[] | undefined | \"\"\n): asserts maybeMaintainers is [GithubHandle, ...GithubHandle[]] {\n  if (_.isNil(maybeMaintainers) || _.isEmpty(maybeMaintainers)) {\n    console.log(`MAINTAINERS: ${process.env.MAINTAINERS}`);\n    throw new CriticalError(\"at least one maintainer must be provided\");\n  }\n\n  for (const maybeMaintainer of maybeMaintainers) {\n    assertGithubHandle(maybeMaintainer);\n  }\n}\n\nconst getEditors = (envEditors?: string) => {\n  const editors = handleStringToArray(envEditors);\n  assertEditorsFormat(editors);\n  return editors;\n};\nconst getMaintainers = (envMaintainers?: string) => {\n  const maintainers = handleStringToArray(envMaintainers);\n  assertMaintainersFormat(maintainers);\n  return maintainers;\n};\n/** don't use this directly, use `requireCoreEditors` instead */\nexport const CORE_EDITORS = () => getEditors(process.env.CORE_EDITORS);\n/** don't use this directly, use `requireERCEditors` instead */\nexport const ERC_EDITORS = () => getEditors(process.env.ERC_EDITORS);\n/** don't use this directly, use `requireERCEditors` instead */\nexport const NETWORKING_EDITORS = () =>\n  getEditors(process.env.NETWORKING_EDITORS);\n/** don't use this directly, use `requireERCEditors` instead */\nexport const INTERFACE_EDITORS = () =>\n  getEditors(process.env.INTERFACE_EDITORS);\n/** don't use this directly, use `requireERCEditors` instead */\nexport const META_EDITORS = () => getEditors(process.env.META_EDITORS);\n/** don't use this directly, use `requireERCEditors` instead */\nexport const INFORMATIONAL_EDITORS = () =>\n  getEditors(process.env.INFORMATIONAL_EDITORS);\n/**\n * dont' use this directly, it can explode and break error handling,\n * so use `getMaintainersString` instead where relevant\n * */\nexport const MAINTAINERS = () => {\n  return getMaintainers(process.env.MAINTAINERS);\n};\n\nexport enum FrontMatterAttributes {\n  status = \"status\",\n  eip = \"eip\",\n  author = \"author\",\n  category = \"category\",\n  type = \"type\"\n}\n\nexport enum EIPCategory {\n  erc = \"erc\",\n  core = \"core\",\n  networking = \"networking\",\n  interface = \"interface\"\n}\n\nexport enum EIPTypes {\n  informational = \"informational\",\n  meta = \"meta\",\n  standardsTrack = \"standards track\"\n}\n\nexport const EIPTypeOrCategoryToResolver = {\n  [EIPCategory.erc]: \"ERC_EDITORS\",\n  [EIPCategory.core]: \"CORE_EDITORS\",\n  [EIPCategory.interface]: \"INTERFACE_EDITORS\",\n  [EIPCategory.networking]: \"NETWORKING_EDITORS\",\n  [EIPTypes.meta]: \"META_EDITORS\",\n  [EIPTypes.informational]: \"INFORMATIONAL_EDITORS\"\n};\n\n/** asserts a string's type is within EIPCategory */\nexport function assertIsCategoryEnum(\n  maybeCategory: string,\n  fileName: string\n): asserts maybeCategory is EIPCategory {\n  const categories = Object.values(EIPCategory) as string[];\n  if (!categories.includes(maybeCategory)) {\n    throw new RequirementViolation(\n      [\n        `the provided eip category '${maybeCategory}' of file`,\n        `'${fileName}' is required to be one of (${categories.join(\", \")})`\n      ].join(\" \")\n    );\n  }\n}\n\nexport function assertIsTypeEnum(\n  maybeType: string,\n  fileName: string\n): asserts maybeType is EIPTypes {\n  const types = Object.values(EIPTypes) as string[];\n  if (!types.includes(maybeType)) {\n    throw new RequirementViolation(\n      [\n        `the provided eip type is '${maybeType}' of file`,\n        `'${fileName}' is required to be one of (${types.join(\", \")})`\n      ].join(\" \")\n    );\n  }\n}\n\nexport const assertCategory = ({\n  fileName,\n  maybeCategory,\n  maybeType\n}: {\n  fileName: string;\n  maybeCategory: Maybe<string>;\n  maybeType: Maybe<string>;\n}): {\n  category: Maybe<EIPCategory>;\n  type: EIPTypes;\n} => {\n  if (!maybeType) {\n    throw new RequirementViolation(\n      `A 'type' header is required for all EIPs, '${fileName}' does not have a 'type'`\n    );\n  }\n  const normalizedType = maybeType.toLowerCase();\n  assertIsTypeEnum(normalizedType, fileName);\n\n  if (normalizedType === EIPTypes.informational) {\n    return {\n      category: null,\n      type: EIPTypes.informational\n    };\n  }\n\n  if (normalizedType === EIPTypes.meta) {\n    return {\n      category: null,\n      type: EIPTypes.meta\n    };\n  }\n\n  if (normalizedType === EIPTypes.standardsTrack) {\n    const normalized = maybeCategory?.toLowerCase();\n    if (!normalized) {\n      throw new RequirementViolation(\n        [\n          `'${fileName}' does not have a 'category' property, but it MUST`,\n          `be set for eips that are type ${EIPTypes.standardsTrack}`\n        ].join(\" \")\n      );\n    }\n    assertIsCategoryEnum(normalized, fileName);\n    return {\n      category: normalized,\n      type: EIPTypes.standardsTrack\n    };\n  }\n\n  throw new UnexpectedError(\n    \"type was not a known type, this error should never occur\"\n  );\n};\n\nexport enum EipStatus {\n  draft = \"draft\",\n  withdrawn = \"withdrawn\",\n  lastCall = \"last call\",\n  review = \"review\",\n  final = \"final\",\n  living = \"living\"\n}\n\nexport enum FileStatus {\n  added = \"added\"\n}\n\nexport enum EVENTS {\n  pullRequest = \"pull_request\",\n  pullRequestTarget = \"pull_request_target\",\n  pullRequestReview = \"pull_request_review\"\n}\n\nexport enum ChangeTypes {\n  newEIPFile = \"newEIPFile\",\n  statusChange = \"statusChange\",\n  updateEIP = \"updateEIP\",\n  ambiguous = \"ambiguous\"\n}\n\n/**\n *  A collection of error strings, although confusing the error strings are\n *  define if an error exists and undefined if not; i.e.\n *  `ERRORS.approvalErrors.isAuthorApproved` is truthy if authors have NOT\n *  approved the PR and falsey if they have because in the case that they\n *  have approved the PR no error exists\n */\nexport const DEFAULT_ERRORS: ERRORS = {\n  fileErrors: {},\n  headerErrors: {},\n  authorErrors: {},\n  approvalErrors: {}\n};\n\nexport const CHECK_STATUS_INTERVAL = 30000;\n\nexport const EIP1_REQUIRED_EDITOR_APPROVALS = 5;\n\nexport const isTest = () => {\n  return process.env.NODE_ENV === NodeEnvs.test;\n};\nexport const isMock = () => {\n  return process.env.NODE_ENV === NodeEnvs.mock;\n};\n\nexport const isProd = () => {\n  return process.env.NODE_ENV === NodeEnvs.production;\n};\n\nexport const isDevelopment = () => {\n  return process.env.NODE_ENV === NodeEnvs.developemnt;\n};\n\ntype NockNoMatchingRequest = Opaque<NodeJS.ErrnoException>;\nexport const isNockNoMatchingRequest = (\n  err: any\n): err is NockNoMatchingRequest => {\n  if (isMock()) {\n    const message = err.message?.toLowerCase();\n    if (!message) return false;\n    return AND(\n      /nock/.test(message),\n      /method/.test(message),\n      /url/.test(message),\n      /no match/.test(message)\n    );\n  }\n  return false;\n};\n\ntype NockDisallowedNetConnect = Opaque<NodeJS.ErrnoException>;\nexport const isNockDisallowedNetConnect = (\n  err: any\n): err is NockDisallowedNetConnect => {\n  if (isMock()) {\n    const message = err.message?.toLowerCase();\n    if (!message) return false;\n    return AND(\n      /nock/.test(message),\n      /disallowed/.test(message),\n      /request.*failed/.test(message),\n      /net connect/.test(message)\n    );\n  }\n  return false;\n};\n\nexport const ALLOWED_STATUSES = new Set([\n  EipStatus.draft,\n  EipStatus.lastCall,\n  EipStatus.review\n]);\n"]}