{"version":3,"file":"typeDeclaratives.js","sourceRoot":"","sources":["../../../src/domain/typeDeclaratives.ts"],"names":[],"mappings":";;;;;;AAAA,oDAAuB;AACvB,mCAAkC;AAClC,uCAA8E;AAC9E,sDAA6F;AAG7F,kDAAkD;AAC3C,MAAM,SAAS,GAAG,CACvB,YAA8D,EAC3C,EAAE;IACrB,OAAO,CAAC,IAAA,UAAE,EACR,gBAAC,CAAC,WAAW,CAAC,YAAY,CAAC,EAC3B,gBAAC,CAAC,MAAM,CAAC,YAAY,CAAC,EACtB,gBAAC,CAAC,KAAK,CAAC,YAAY,CAAC,EACrB,YAAY,KAAK,EAAE,EACnB,IAAA,WAAG,EACD,IAAA,UAAE,EAAC,gBAAC,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE,gBAAC,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,EACrD,gBAAC,CAAC,OAAO,CAAC,YAAY,CAAC,CACxB,CACF,CAAC;AACJ,CAAC,CAAC;AAbW,QAAA,SAAS,aAapB;AAEF,SAAgB,aAAa,CAC3B,YAAkC;IAElC,IAAI,IAAA,UAAE,EAAC,gBAAC,CAAC,WAAW,CAAC,YAAY,CAAC,EAAE,gBAAC,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,EAAE;QAC3D,MAAM,IAAI,iCAAoB,CAAC,kCAAkC,CAAC,CAAC;KACpE;AACH,CAAC;AAND,sCAMC;AAED,wDAAwD;AACxD,SAAgB,eAAe,CAC7B,aAAqB,EACrB,OAAe;IAEf,2EAA2E;IAC3E,IAAI,CAAC,kBAAS,CAAC,QAAQ,CAAC,aAAoB,CAAC;QAC3C,MAAM,IAAI,4BAAe,CACvB,uBAAuB,OAAO,KAAK,aAAa,EAAE,CACnD,CAAC;AACN,CAAC;AATD,0CASC;AAED,SAAgB,MAAM,CAAiB,KAAU;IAC/C,OAAO,KAAK,CAAC;AACf,CAAC;AAFD,wBAEC;AAGM,MAAM,cAAc,GAAG,CAAC,GAAQ,EAAuB,EAAE;IAC9D,OAAO,IAAA,WAAG,EACR,GAAG,CAAC,QAAQ,EAAE,MAAM,KAAK,GAAG,EAC5B,GAAG,CAAC,QAAQ,EAAE,IAAI,EAAE,OAAO,KAAK,WAAW,CAC5C,CAAC;AACJ,CAAC,CAAC;AALW,QAAA,cAAc,kBAKzB;AAEK,MAAM,YAAY,GAAG,CAAC,GAAW,EAAsB,EAAE;IAC9D,OAAO,MAAM,CAAC,MAAM,CAAC,oBAAW,CAAC,CAAC,QAAQ,CAAC,GAAU,CAAC,CAAC;AACzD,CAAC,CAAC;AAFW,QAAA,YAAY,gBAEvB;AAIF,SAAgB,kBAAkB,CAChC,WAAmB;IAEnB,IAAI,CAAC,sBAAa,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE;QACpC,MAAM,IAAI,0BAAa,CACrB,GAAG,WAAW,6CAA6C,CAC5D,CAAC;KACH;AACH,CAAC;AARD,gDAQC;AAED,SAAgB,WAAW,CAAI,KAAU,IAAuB,CAAC;AAAjE,kCAAiE","sourcesContent":["import _ from \"lodash\";\nimport { AND, OR } from \"#/utils\";\nimport { ChangeTypes, Encodings, encodings, GITHUB_HANDLE } from \"src/domain\";\nimport { CriticalError, RequirementViolation, UnexpectedError } from \"src/domain/exceptions\";\nimport { Opaque } from \"type-fest\";\n\n/** includes a check for NaN and general falsey */\nexport const isDefined = <T>(\n  maybeDefined: T | null | undefined | typeof NaN | [] | {} | \"\"\n): maybeDefined is T => {\n  return !OR(\n    _.isUndefined(maybeDefined),\n    _.isNull(maybeDefined),\n    _.isNaN(maybeDefined),\n    maybeDefined === \"\",\n    AND(\n      OR(_.isObject(maybeDefined), _.isArray(maybeDefined)),\n      _.isEmpty(maybeDefined)\n    )\n  );\n};\n\nexport function assertDefined<T>(\n  maybeDefined: T | null | undefined\n): asserts maybeDefined is T {\n  if (OR(_.isUndefined(maybeDefined), _.isNull(maybeDefined))) {\n    throw new RequirementViolation(\"A defined assertion was violated\");\n  }\n}\n\n/** Ensures that encodings are as expected by octokit */\nexport function requireEncoding(\n  maybeEncoding: string,\n  context: string\n): asserts maybeEncoding is Encodings {\n  // any here because of https://github.com/microsoft/TypeScript/issues/26255\n  if (!encodings.includes(maybeEncoding as any))\n    throw new UnexpectedError(\n      `Unknown encoding of ${context}: ${maybeEncoding}`\n    );\n}\n\nexport function castTo<CastToThisType>(value: any): CastToThisType {\n  return value;\n}\n\ntype FileNotFound = Opaque<NodeJS.ErrnoException>;\nexport const isFileNotFound = (err: any): err is FileNotFound => {\n  return AND(\n    err.response?.status === 404,\n    err.response?.data?.message === \"Not Found\"\n  );\n};\n\nexport const isChangeType = (str: string): str is ChangeTypes => {\n  return Object.values(ChangeTypes).includes(str as any);\n};\n\nexport type GithubHandle = Opaque<string>;\n\nexport function assertGithubHandle(\n  maybeHandle: string\n): asserts maybeHandle is GithubHandle {\n  if (!GITHUB_HANDLE.test(maybeHandle)) {\n    throw new CriticalError(\n      `${maybeHandle} is not a correctly formatted github handle`\n    );\n  }\n}\n\nexport function declareType<T>(input: any): asserts input is T {}\n"]}