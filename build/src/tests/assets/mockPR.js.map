{"version":3,"file":"mockPR.js","sourceRoot":"","sources":["../../../../src/tests/assets/mockPR.ts"],"names":[],"mappings":"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","sourcesContent":["import { getOctokit } from \"@actions/github\";\nimport nock from \"nock\";\nimport {\n  GITHUB_TOKEN,\n  MockMethods,\n  MockRecord,\n  NodeEnvs,\n  PR,\n  requireMockMethod\n} from \"src/domain\";\nimport { assertSavedRecord, getMockRecords, SavedRecord } from \"./records\";\nimport * as fs from \"fs\";\nimport { CriticalError, UnexpectedError } from \"src/domain/exceptions\";\nimport * as HttpStatus from \"http-status\";\n\nconst baseUrl = \"https://api.github.com\";\nconst scope = nock(baseUrl).persist();\n\n/**\n * This is a tool used to mock pull requests, this is useful for testing and it's also\n * useful for development. It makes dealing with merged PRs trivial because if you change\n * the mocked requests in its respective asset file then you can simulate situations\n *\n * @param pullNumber the pull number to mock (mocks the necesary github api requests)\n * @returns mocked pull request of the pull number\n */\nexport const mockPR = async (pullNumber: SavedRecord) => {\n  const mockRecords = await getMockRecords();\n  const records = mockRecords[`PR${pullNumber}`];\n\n  if (!records)\n    throw new CriticalError(`no mocked records for pull number ${pullNumber}`);\n\n  for (const record of records) {\n    const req = record.req;\n    const res = record.res;\n\n    if (!req && !res) continue; // allows for setting {} for new mocks\n\n    const wildcard = req.url.replace(baseUrl, \"\");\n\n    switch (req.method) {\n      case \"GET\":\n        scope.get(wildcard).reply(res.status, res.data);\n        break;\n      case \"POST\":\n        scope.post(wildcard).reply(res.status, res.data);\n        break;\n      case \"PATCH\":\n        scope.patch(wildcard).reply(res.status, res.data);\n        break;\n      case MockMethods.put:\n        scope.put(wildcard).reply(res.status, res.data);\n        break;\n    }\n  }\n\n  nock.disableNetConnect();\n\n  const PRWildcard = `/repos/ethereum/EIPs/pulls/${pullNumber}`;\n  return records.find(\n    (record) =>\n      record.req?.method === \"GET\" &&\n      record.req?.url === `${baseUrl}${PRWildcard}`\n  )?.res?.data as PR;\n};\n\n// TODO: rename and reorganize these debugging tools\nexport const __MAIN_MOCK__ = async (mockEnv?: NodeJS.ProcessEnv) => {\n  const isMock =\n    process.env.NODE_ENV === NodeEnvs.mock ||\n    process.env.NODE_ENV === NodeEnvs.test;\n\n  if (!isMock)\n    throw new CriticalError(\"trying to run debug without proper auth\");\n\n  // setup debug env\n  await setMockContext(mockEnv);\n\n  // by instantiating after context and env are custom set,\n  // it allows for a custom environment that's setup programmatically\n  const main = (await import(\"src/main\")).main;\n\n  // only want to run this once to make things easier\n  try {\n    return await main();\n  } catch (err: any) {\n    const url = err?.request?.url;\n    const method = err?.request?.method;\n    const body = err?.request?.body;\n\n    console.log(err.type);\n    if (url && method) {\n      await fetchAndCreateRecord(url, method, body);\n    } else {\n      throw err;\n    }\n  }\n};\n\nexport const setMockContext = async (mockEnv?: NodeJS.ProcessEnv) => {\n  const env = { ...process.env, ...mockEnv };\n  process.env = env;\n\n  if (!env.PULL_NUMBER)\n    throw new CriticalError(\"PULL_NUMBER is required to mock\");\n\n  // setup saved record (mocking network responses)\n  assertSavedRecord(env.PULL_NUMBER);\n  const pr = await mockPR(env.PULL_NUMBER);\n\n  // By instantiating after above it allows it to initialize with custom env\n  const context = (await import(\"@actions/github\")).context;\n\n  context.payload.pull_request = {\n    base: {\n      sha: pr?.base?.sha\n    },\n    head: {\n      sha: pr?.head?.sha\n    },\n    number: parseInt(env.PULL_NUMBER || \"\") || 0\n  };\n\n  // context.issue.number = pr.number\n\n  context.payload.repository = {\n    // @ts-ignore\n    name: env.REPO_NAME,\n    owner: {\n      key: \"\",\n      // @ts-ignore\n      login: env.REPO_OWNER_NAME,\n      name: env.REPO_OWNER_NAME\n    },\n    full_name: `${env.REPO_OWNER}/${env.REPO_NAME}`\n  };\n  // @ts-ignore\n  context.eventName = env.EVENT_TYPE;\n};\n\nconst fetchAndCreateRecord = async (\n  url: string,\n  method: MockMethods,\n  body?: string\n) => {\n  console.error(\"failed request\", method, url, \"\\nmocking request...\");\n\n  const isMock = process.env.NODE_ENV === NodeEnvs.mock;\n\n  if (!isMock) return;\n\n  nock.cleanAll();\n  nock.enableNetConnect();\n  const github = getOctokit(GITHUB_TOKEN).request;\n  const res = await github({\n    method,\n    url,\n    ...JSON.parse(body || \"{}\")\n  }).catch((err) => {\n    nock.disableNetConnect();\n    return err;\n  });\n  console.log(\"successfully fetched data\");\n  nock.disableNetConnect();\n\n  const fileName = `records/${process.env.PULL_NUMBER?.replace(\"_\", \"/\")}.json`;\n  const mockedRecord: MockRecord[] = (await import(\"./\" + fileName)).default;\n\n  requireMockMethod(method);\n  const handleResData = (res) => {\n    const status = res.status;\n    if ([HttpStatus.OK, HttpStatus.CREATED].includes(status)) {\n      // when successful it returns the response in a res.data format\n      return res.data;\n    }\n    if ([HttpStatus.NOT_FOUND].includes(status)) {\n      // when it returns a not found or other types of failures\n      return res.response.data;\n    }\n    throw new UnexpectedError(`status code ${status} is not a handled status`);\n  };\n  mockedRecord.push({\n    req: {\n      url,\n      method\n    },\n    res: {\n      status: res.status,\n      data: handleResData(res)\n    }\n  });\n\n  console.log(process.cwd() + \"/src/tests/assets/\" + fileName);\n  fs.writeFile(\n    process.cwd() + \"/src/tests/assets/\" + fileName,\n    JSON.stringify(mockedRecord, null, 2),\n    () => {\n      console.log(mockedRecord);\n      console.log(\"wrote file\");\n    }\n  );\n};\n"]}