{"version":3,"file":"github.js","sourceRoot":"","sources":["../../../src/infra/github.ts"],"names":[],"mappings":"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","sourcesContent":["import { context, getOctokit } from \"@actions/github\";\nimport {\n  ChangeTypes,\n  ContentData,\n  GITHUB_TOKEN,\n  GithubSelf,\n  isChangeType,\n  isDefined,\n  isMock,\n  IssueComments,\n  isTest,\n  PR,\n  Review\n} from \"src/domain\";\nimport _ from \"lodash\";\nimport { RequestError } from \"@octokit/request-error\";\nimport * as path from \"path\";\n\nconst getEventName = () => {\n  return context.eventName;\n};\n\nconst getPullNumber = () => {\n  return context.payload?.pull_request?.number || parseInt(process.env.PR_NUMBER as string, 10);\n};\n\nconst getPullRequestFromNumber = (pullNumber: number) => {\n  const github = getOctokit(GITHUB_TOKEN).rest;\n\n  return github.pulls\n    .get({\n      repo: context.repo.repo,\n      owner: context.repo.owner,\n      pull_number: pullNumber\n    })\n    .then((res) => {\n      return res.data;\n    });\n};\n\n/**\n * this recurses through github pages of reviews until none are left; it is\n * meant to avoid losing data if there's more data than can be retrieved in one\n * request\n * */\nconst getPullRequestReviews = async (\n  pullNumber: number,\n  page = 1\n): Promise<Review[]> => {\n  const Github = getOctokit(GITHUB_TOKEN).rest;\n  const { data: reviews }: { data: Review[] } = await Github.pulls.listReviews({\n    owner: context.repo.owner,\n    repo: context.repo.repo,\n    pull_number: pullNumber,\n    per_page: 100,\n    page\n  });\n  if (_.isEmpty(reviews)) {\n    return reviews;\n  }\n  return getPullRequestReviews(pullNumber, page + 1).then((res) =>\n    reviews.concat(res)\n  );\n};\n\nconst getPullRequestFiles = (pullNumber: number) => {\n  const Github = getOctokit(GITHUB_TOKEN).rest;\n  return Github.pulls\n    .listFiles({\n      pull_number: pullNumber,\n      repo: context.repo.repo,\n      owner: context.repo.owner\n    })\n    .then((res) => res.data);\n};\n\nconst getRepoFilenameContent = (\n  filename: string,\n  sha: string\n): Promise<ContentData> => {\n  const Github = getOctokit(GITHUB_TOKEN).rest;\n  try {\n    return Github.repos\n      .getContent({\n        owner: context.repo.owner,\n        repo: context.repo.repo,\n        path: filename,\n        ref: sha\n      })\n      .then((res) => res.data);\n  } catch (err) {\n    if (err instanceof RequestError) {\n      if (err.status == 404) {\n        return new Promise((resolve) => resolve({\n          type: \"file\",\n          size: 0,\n          name: path.basename(filename),\n          path: filename,\n          content: \"\",\n          encoding: \"utf-8\",\n          sha: sha,\n          url: \"\",\n          git_url: null,\n          html_url: null,\n          download_url: null,\n          _links: {\n            git: null,\n            html: null,\n            self: \"\"\n          }\n        }));;\n      }\n    }\n    throw err;\n  }\n};\n\nconst requestReview = (pr: PR, reviewer: string) => {\n  const Github = getOctokit(GITHUB_TOKEN).rest;\n  return (\n    Github.pulls\n      .requestReviewers({\n        owner: context.repo.owner,\n        repo: context.repo.repo,\n        pull_number: pr.number,\n        reviewers: [reviewer]\n      })\n      // if an error occurs return undefined\n      .catch((err) => {})\n  );\n};\n\nconst resolveUserByEmail = async (email: string) => {\n  const Github = getOctokit(GITHUB_TOKEN).rest;\n\n  // @ts-ignore\n  const { data: rawEmailSearch } = await Github.search.users({\n    q: email\n  });\n\n  if (rawEmailSearch.total_count > 0 && rawEmailSearch.items[0] !== undefined) {\n    return \"@\" + rawEmailSearch.items[0].login;\n  }\n\n  const { data: emailSearch } = await Github.search.users({\n    q: `${email} in:email`\n  });\n\n  if (emailSearch.total_count === 1 && isDefined(emailSearch.items[0])) {\n    return \"@\" + emailSearch.items[0].login;\n  }\n\n  const local = email.split(\"@\")[0];\n  if (!local) return;\n  const firstName = local.split(\".\")[0];\n  const lastName = local.split(\".\")[1];\n  if (!firstName || !lastName) return;\n\n  const { data: nameSearch } = await Github.search.users({\n    q: `fullname:${firstName} ${lastName} type:users`\n  });\n\n  if (nameSearch.total_count === 1 && isDefined(nameSearch.items[0])) {\n    return \"@\" + nameSearch.items[0].login;\n  }\n\n  return;\n};\n\nconst getSelf = (): Promise<GithubSelf> => {\n  const Github = getOctokit(GITHUB_TOKEN).rest;\n  return Github.users.getAuthenticated().then((res) => {\n    return res.data;\n  });\n};\n\nconst getContextIssueComments = (): Promise<IssueComments> => {\n  const Github = getOctokit(GITHUB_TOKEN).rest;\n  return Github.issues\n    .listComments({\n      owner: context.repo.owner,\n      repo: context.repo.repo,\n      issue_number: getPullNumber()\n    })\n    .then((res) => res.data);\n};\n\nconst updateComment = (commentId: number, message: string): Promise<any> => {\n  const Github = getOctokit(GITHUB_TOKEN).rest;\n  return Github.issues\n    .updateComment({\n      owner: context.repo.owner,\n      repo: context.repo.repo,\n      comment_id: commentId,\n      body: message\n    })\n    .catch((err) => {\n      if (err?.request?.body) {\n        err.request.body = JSON.parse(err.request.body).body;\n      }\n      throw err;\n    });\n};\n\nconst createCommentOnContext = (message: string): Promise<any> => {\n  const Github = getOctokit(GITHUB_TOKEN).rest;\n  return Github.issues.createComment({\n    owner: context.repo.owner,\n    repo: context.repo.repo,\n    issue_number: getPullNumber(),\n    body: message\n  });\n};\n\nconst getContextLabels = async (): Promise<ChangeTypes[]> => {\n  const Github = getOctokit(GITHUB_TOKEN).rest;\n  const { data: issue } = await Github.issues.get({\n    owner: context.repo.owner,\n    repo: context.repo.repo,\n    issue_number: getPullNumber()\n  });\n\n  const labels = issue.labels;\n\n  return labels\n    .map((label) => {\n      if (typeof label === \"string\") {\n        return label;\n      }\n      return label.name;\n      // this will make it so that the only labels considered are ChangeTypes\n    })\n    .filter(isDefined)\n    .filter(isChangeType);\n};\n\nconst setLabels = async (labels: string[]): Promise<void> => {\n  const Github = getOctokit(GITHUB_TOKEN).rest;\n  await Github.issues\n    .setLabels({\n      owner: context.repo.owner,\n      repo: context.repo.repo,\n      issue_number: getPullNumber(),\n      // @ts-expect-error the expected type is (string[] & {name: string}[]) | undefined\n      // but string[] and {name: string}[] cannot simultaneously coincide\n      labels\n    })\n    .then((res) => res);\n};\n\nconst addLabels = async (labels: string[]): Promise<void> => {\n  const Github = getOctokit(GITHUB_TOKEN).rest;\n\n  // makes it easy to maintain the integration tests and the\n  // responses from this are not used\n  if (isMock() || isTest()) return;\n\n  // because of a weird type issue\n  const { addLabels: _addLabels } = Github.issues;\n\n  await _addLabels({\n    owner: context.repo.owner,\n    repo: context.repo.repo,\n    issue_number: getPullNumber(),\n    labels\n  });\n};\n\nconst removeLabels = async (labels: string[]) => {\n  const Github = getOctokit(GITHUB_TOKEN).rest;\n\n  // makes it easy to maintain the integration tests and the\n  // responses from this are not used\n  if (isMock() || isTest()) return;\n\n  await Promise.all(\n    // this will submit a max of three requests which is not enough to\n    // rate limit\n    labels.map((label) =>\n      Github.issues.removeLabel({\n        owner: context.repo.owner,\n        repo: context.repo.repo,\n        issue_number: getPullNumber(),\n        name: label\n      })\n    )\n  );\n};\n\nexport const github = {\n  getSelf,\n  resolveUserByEmail,\n  requestReview,\n  getRepoFilenameContent,\n  getPullRequestFiles,\n  getPullRequestReviews,\n  getPullRequestFromNumber,\n  getPullNumber,\n  getEventName,\n  getContextIssueComments,\n  updateComment,\n  createCommentOnContext,\n  getContextLabels,\n  setLabels,\n  addLabels,\n  removeLabels\n};\n\nexport type GithubInfra = typeof github;\n"]}